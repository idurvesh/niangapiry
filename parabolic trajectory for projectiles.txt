////////////////////////////////////////////////////////////////////////////////////////////////////////////
DR. PETTERS SYSTEM taken from some game :

		x += dx
		y += dy * 0.2	// %5 = -6.4
		dy -= 0.5; 	// this is "The gravity"


////////////////////////////////////////////////////////////////////////////////////////////////////////////
This is my own revisión with the timeStep added (for the use inside Unity):

	//	NextPosition.x += moveDirection.x * Time.deltaTime; // multiply with speed to go faster
	//	NextPosition.y += moveDirection.y * Time.deltaTime; // multiply with speed to go faster
	// 	MoveDirection.y -= 9.8 * Time.deltaTime;

		NextPosition += moveDirection * Time.deltaTime;     // same as above but cleaner
		moveDirection.y -= 0.5 * gravity  * (Time.maximumDeltaTime * Time.maximumDeltaTime);
	
		transform.position = NextPosition; 


////////////////////////////////////////////////////////////////////////////////////////////////////////////
This it's the real formula (a lot more complicated for sure):

var moveDirection : Vector3 = Vector3.zero;
var StartPosition : Vector3 = Vector3.zero;
var NextPosition  : Vector3 = Vector3.zero;
var StartTime     : float	= 0;

function Fire()
{
	StartTime = Time.time;
	
	moveDirection = Vector3( Mathf.Sign(orientation) * 3, 4, 0);	// Set here the power
	NextPosition = StartPosition = transform.position;
   	enemyState = ShooterState.Shooted;
}

function UpDateShot()
{
	var TimeLapse : float = Time.time - StartTime;
	NextPosition.x = StartPosition.x + (moveDirection.x * TimeLapse) ;
	NextPosition.y = StartPosition.y + (moveDirection.y * TimeLapse) - (.5 * gravity * (TimeLapse * TimeLapse));
	transform.position  = NextPosition ; 
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
Another variation:

var moveDirection : Vector3 = Vector3.zero;
var StartPosition : Vector3 = Vector3.zero;
var TimeLapse 	  : float   = 0;

function Fire()
{
	moveDirection = Vector3( Mathf.Sign(orientation) * 3, 4, 0);	// Set here the power
	NextPosition = StartPosition = transform.position;
   	enemyState = ShooterState.Shooted;
}

function UpDateShot()
{
	TimeLapse  += Time.deltaTime;							// the difference it's time increment
	transform.position.x = StartPosition.x + (moveDirection.x * TimeLapse) ;
	transform.position.y = StartPosition.y + (moveDirection.y * TimeLapse) - (.5 * gravity * (TimeLapse * TimeLapse));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////