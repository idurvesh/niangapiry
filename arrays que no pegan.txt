CGPersia
CGP


Hi, sorry, I don't know if this it's the best place but I have the same problem!...
When reinstalled the tortoiseSvn and trying to access it, then I can't see my own project:
https://proyecto-galaxy-olimpycs.googlecode.com:443

I found someway one weird link to the trunk:
http://www.google.com.ar/url?sa=t&rct=j&q=&esrc=s&source=web&cd=17&ved=0CGEQFjAGOAo&url=http%3A%2F%2Fproyecto-galaxy-olympics.googlecode.com%2Fsvn-history%2Fr78%2Ftrunk%
but I need some pass or something, no idea what's happening.

Thanks for your time...










necesitamos un array que guarde cinco lugares de espacio maximo, que funcione como inventario
, empezando vacio y que cada vez que se recoge un objeto se agregue al array con un indice propio
, teniendo la posibilidad de recorrer todo el array, siempre que haya algún objeto, con las teclas
arriba y abajo: si hay objeto disponible ( sino es nulo) seleccionar y mostrarlo en la interface 
sino volver a incrementar en uno el indice hasta llegar al fim/principio y seguir buscando hasta encontrar
algún objeto sino no hay ninguno y el inventario está vacio entonces detener la busqueda y no mostrar nada..

var size 	: int = 5;	// == Inventory.Length
var ActualSize	: int = 0;	// range: 1 - 5 (0 == empty) 
 
var index 	: int = 0;	// range: 0 - 4 ( size -1)

var Inventory = new String[size] ;

function ObjPickUp( Obj : String )
{

 if (ActualSize < size )

 	for ( luiIndex = 0; luiIndex < size ; luiIndex ++)
 	{
		if ( Inventory[ luiIndex ] == "empty" )
		{
			InventoryluiIndex = Obj;
			ActualSize += 1;
			index = luiIndex;
			return;		
		}
	 }
}

function ObjClean( Obj : String)
{
 if ( ActualSize > 0 )
	for ( luiIndex = 0; luiIndex < size ; luiIndex ++)
	{
		if ( Inventory[ luiIndex ] == Obj )
		{
			Inventory[ luiIndex ] = "empty"
			ActualSize -= 1;
			if ( ActualSize > 0 ) SeekDownside();
			return;
		}		
	}
}

function ObjClean( ObjIndex : int)
{
 	if ( ActualSize > 0  && (  Inventory[ ObjIndex ] != "empty"  ) )
	{
		Inventory[ ObjIndex ] = "empty"
		ActualSize -= 1;
		if ( ActualSize > 0 ) SeekDownside();
		return;
	}
}

function ExampleUpdate()
{
...
	if (ActualSize > 1 )
	{
		if (Input.GetKey("up")  )  SeekUpside( );

		if (Input.GetKey("down") ) SeekDownside( );
		
	}
	
	if (  ActualSize ) Show( Inventory[index] );
}




function SeekUpside( )
{ 
	while ( Inventory[ index ] == "empty" && ActualSize ) 
	{
 		index++;
   
 		index %= size; 				// max index == size -1
 	}

}


function SeekDownside( )
{

	while ( Inventory[ index ] == "empty" && ActualSize  ) 
	{
 		index--;
   		
		index +=  size * System.Convert.ToByte( index < 0 );
	}
	
	//	index +=  size * ( index < 0  ? 1 : 0);
 	//	if ( index < 0) index = size -1; 	// min index == 0
 	//	if ( !ActualSize ) return;
}


///////////////////////////////////////////////////////////////////////////



function SeekUpside( ) { 

 luiIndex = index ;
 
 while( luiIndex < size )
 {

	luiIndex++;

	if ( Inventory[ luiIndex  ] != "empty" )
	{
		index = luiIndex;
		return;
	}
	

 }
 
 if ( ActualSize )
 {
	Index = 0;
 	SeekUpside();
 }
}


function SeekDownside( ) {

 luiIndex = index ;
 
 while(luiIndex > 0)
 {

	luiIndex--;

	if ( Inventory[ luiIndex  ] != "empty" )
	{
		index = luiIndex;
		return;
	}
	
 }

 if ( ActualSize )
 {
 	index = size  -1;
 	SeekDownside();
 }

}


